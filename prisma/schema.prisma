generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model post_visibilities {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(20)
  posts posts[]
}

model posts {
  id                Int               @id @default(autoincrement())
  title             String            @db.VarChar(60)
  url_image         String?           @db.VarChar(255)
  content           String            @db.Text
  created_at        DateTime?         @default(now()) @db.DateTime(0)
  updated_at        DateTime?         @default(now()) @db.DateTime(0)
  visibility_id     Int               @default(1)
  post_visibilities post_visibilities @relation(fields: [visibility_id], references: [id], onDelete: Cascade, map: "posts_ibfk_1")

  @@index([visibility_id], map: "visibility_id")
  @@map("post")
}

model role_post_user {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(20)
}

model roles {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(20)
  user_roles user_roles[]
  @@map("role")
}

model user_posts {
  id                Int @id @default(autoincrement())
  user_id           Int
  post_id           Int
  role_user_post_id Int
}

model user_roles {
  id      Int   @id @default(autoincrement())
  user_id Int
  role_id Int
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "user_roles_ibfk_1")
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "user_roles_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([user_id], map: "user_id")
}

model user_status {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(20)
  users users[]
}

model users {
  id                    Int          @id @default(autoincrement())
  email                 String       @unique(map: "email") @db.VarChar(255)
  name                  String       @db.VarChar(40)
  surname               String       @db.VarChar(40)
  username              String       @unique(map: "username") @db.VarChar(20)
  password              String       @db.VarChar(80)
  status_id             Int?         @default(1)
  token                 String?      @db.VarChar(100)
  token_expiration_date DateTime?    @db.DateTime(0)
  created_at            DateTime?    @default(now()) @db.DateTime(0)
  updated_at            DateTime?    @default(now()) @db.DateTime(0)
  email_validado        Boolean?     @default(false)
  avatar_url            String?      @db.VarChar(255)
  user_status           user_status? @relation(fields: [status_id], references: [id], onDelete: Cascade, map: "users_ibfk_1")
  user_roles            user_roles[]

  @@index([status_id], map: "status_id")
  @@map("user")
}
